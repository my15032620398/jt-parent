<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">
	<!-- 1.开启包扫描 -->
	<context:component-scan base-package="com.jt" />
	
	<!-- 2.1spring加载properties配置文件 如果加载多个文件,需要使用通配符 -->
	<!-- <context:property-placeholder location="classpath:/properties/*.properties"/> -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/properties/*.properties</value>
			</list>
		</property>
	</bean>
	<!--2.2管理数据 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- 配置Spring事务策略 注解形式:配置简单,但是在使用时需要在每个方法或者类上添加注解 配置文件形式:配置方式较为繁琐,但是以后写方法时不需要再关注事务控制 -->
	<!-- 3.1配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!--配置数据源 -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- 3.2定义事务的管理策略
	事务传播属性 
	REQUIRED	表示必须添加事务
	NEVER		表示从不添加事务
	SUPPORTS	如果之前的操作有事务,则合并为一个事务,如果之前没有事务,则不添加事务
	REQUIRES_NEW 每次添加新的事务
	propagation="REQUIRED"
	 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<!--定义读数据的方法 -->
			<tx:method name="find*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS"
				read-only="true" />

			<!--更新数据库操作 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />

			<!--其他方法 -->
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!--3.3配置事物切面
	Content Model : (pointcut*, advisor*, aspect*)
	按类匹配(粗粒度):
	 	within(包名.类名)
	 安方法参数匹配(细粒度):
	 execution(返回值类型.包名.类名.方法名(参数列表))
	 
	 AOP:
	 	在不影响源码的条件下,对方法做了扩展
	 	通知类型
	 	1.前置通知
	 	2.后置通知
	 	3.异常通知
	 	4.最终通知
	 	5.环绕通知,真正干预目标方法执行
	 -->
	 
	 
	<aop:config>
		<aop:pointcut
			expression="execution(* com.jt.manage.service..*.*(..))" id="pc" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc" />
	</aop:config>
</beans>